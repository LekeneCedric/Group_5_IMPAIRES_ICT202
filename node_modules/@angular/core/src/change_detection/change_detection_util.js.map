{"version":3,"sources":["../../../../../modules/@angular/core/src/change_detection/change_detection_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,iBAAE,EAAkB,kBAAA,EAAmB,MAAA,sBAAA,CAAA;AAC9C,OAAO,EAAA,WAAE,EAAY,cAAA,EAAe,MAAA,gBAAA,CAAA;AAEpC,OAAO,EAAA,cAAE,EAAc,MAAA,gBAAA,CAAA;AACvB;;;;GAIG;AACH,MAJC,uBAAA,CAAA,EAAA,CAAA;IAKC,EAAE,CAAC,CAAC,kBAJC,CAAkB,CAAC,CAAC,IAAI,kBAAA,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAA;QAKlD,MAAM,CAJC,iBAAA,CAAkB,CAAC,EAAE,CAAA,EAAG,YAAA,CAAa,CAAC;IAM/C,CAAC;IAJC,IAAA,CAAK,EAAA,CAAA,CAKH,CAAC,kBAJC,CAAkB,CAAC,CAAC,IAAI,CAAA,WAAE,CAAW,CAAC,CAAC,IAAI,CAAA,kBAAE,CAAkB,CAAC,CAAC,IAAI,CAAA,WAAE,CAAW,CAAC,CAAC,CAAC,CAAC,CAAA;QAK1F,MAAM,CAJC,IAAA,CAAK;IAMd,CAAC;IAJC,IAAA,CAAK,CAAA;QAKL,MAAM,CAJC,cAAA,CAAe,CAAC,EAAE,CAAA,CAAE,CAAC;IAK9B,CAAC;AACH,CAAC;AACD;;;;;;;;;;;;;;;;;;GAkBG;AACH;IACA;;OAEG;IACH,sBANqB,OAAS;QAAT,YAAA,GAAA,OAAA,CAAS;IAAI,CAAA;IAOlC;;;OAGG;IARA,iBAAA,GASH,UATG,KAAA,IAAuC,MAAA,CAAO,IAAI,YAAA,CAAa,KAAC,CAAK,CAAC,CAAC,CAAA;IAU1E,mBAAC;AAAD,CAVA,AAUC,IAAA;;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH;IAAA;QAbS,oBAAA,GAAkB,KAAA,CAAM;IA8BjC,CAAC;IAfD;;;OAGG;IACH,+BAjBG,GAiBH,UAjBG,KAAA;QAkBC,EAAE,CAAC,CAAC,KAjBC,YAAgB,YAAA,CAAa,CAAC,CAAA;YAkBjC,IAAI,CAjBC,eAAC,GAAiB,IAAA,CAAK;YAkB5B,MAAM,CAjBC,KAAA,CAAM,OAAC,CAAO;QAkBvB,CAAC;QACD,MAAM,CAjBC,KAAA,CAAM;IAkBf,CAAC;IACH;;OAEG;IACH,8BAnBG,GAmBH,cAnBY,IAAA,CAAK,eAAC,GAAiB,KAAA,CAAM,CAAC,CAAA;IAoB1C,qBAAC;AAAD,CAjBA,AAiBC,IAAA;;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;AACzC,CAAC;AAED;;;GAGG;AACH;IACA;;;;OAIG;IACH,sBA7BqB,aAAe,EAAY,YAAc,EAAY,WAAa;QAAlE,kBAAA,GAAA,aAAA,CAAe;QAAY,iBAAA,GAAA,YAAA,CAAc;QAAY,gBAAA,GAAA,WAAA,CAAa;IAAQ,CAAA;IAgC/F;;;OAGG;IACH,oCA/BG,GA+BH,cA/B6B,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;IAgCtD,mBAAC;AAAD,CAdA,AAcC,IAAA;;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;IACrC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC;IACpC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;AACnC,CAAC","file":"change_detection_util.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {areIterablesEqual, isListLikeIterable} from '../facade/collection';\nimport {isPrimitive, looseIdentical} from '../facade/lang';\n\nexport {looseIdentical} from '../facade/lang';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a: any, b: any): boolean {\n  if (isListLikeIterable(a) && isListLikeIterable(b)) {\n    return areIterablesEqual(a, b, devModeEqual);\n\n  } else if (\n      !isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n    return true;\n\n  } else {\n    return looseIdentical(a, b);\n  }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference\n * has not changed.\n * \n * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n * \n * Example:\n * \n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * \\@stable\n */\nexport class WrappedValue {\n/**\n * @param {?} wrapped\n */\nconstructor(public wrapped: any) {}\n/**\n * @param {?} value\n * @return {?}\n */\nstatic wrap(value: any): WrappedValue { return new WrappedValue(value); }\n}\n\nfunction WrappedValue_tsickle_Closure_declarations() {\n/** @type {?} */\nWrappedValue.prototype.wrapped;\n}\n\n/**\n * Helper class for unwrapping WrappedValue s\n */\nexport class ValueUnwrapper {\npublic hasWrappedValue = false;\n/**\n * @param {?} value\n * @return {?}\n */\nunwrap(value: any): any {\n    if (value instanceof WrappedValue) {\n      this.hasWrappedValue = true;\n      return value.wrapped;\n    }\n    return value;\n  }\n/**\n * @return {?}\n */\nreset() { this.hasWrappedValue = false; }\n}\n\nfunction ValueUnwrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nValueUnwrapper.prototype.hasWrappedValue;\n}\n\n/**\n * Represents a basic change from a previous to a new value.\n * \\@stable\n */\nexport class SimpleChange {\n/**\n * @param {?} previousValue\n * @param {?} currentValue\n * @param {?} firstChange\n */\nconstructor(public previousValue: any,\npublic currentValue: any,\npublic firstChange: boolean) {}\n/**\n * Check whether the new value is the first value assigned.\n * @return {?}\n */\nisFirstChange(): boolean { return this.firstChange; }\n}\n\nfunction SimpleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleChange.prototype.previousValue;\n/** @type {?} */\nSimpleChange.prototype.currentValue;\n/** @type {?} */\nSimpleChange.prototype.firstChange;\n}\n\n"]}