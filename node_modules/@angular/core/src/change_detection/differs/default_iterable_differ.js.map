{"version":3,"sources":["../../../../../../modules/@angular/core/src/change_detection/differs/default_iterable_differ.ts"],"names":[],"mappings":"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","file":"default_iterable_differ.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isListLikeIterable, iterateListLike} from '../../facade/collection';\nimport {isBlank, looseIdentical, stringify} from '../../facade/lang';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: Object): boolean { return isListLikeIterable(obj); }\n\n  create<V>(trackByFn?: TrackByFunction<any>): DefaultIterableDiffer<V>;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @param {?=} cdRefOrTrackBy\n * @param {?=} trackByFn\n * @return {?}\n */\ncreate<V>(\n      cdRefOrTrackBy?: ChangeDetectorRef|TrackByFunction<any>,\n      trackByFn?: TrackByFunction<any>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn || /** @type {?} */(( <TrackByFunction<any>>cdRefOrTrackBy)));\n  }\n}\n\nconst /** @type {?} */ trackByIdentity = (index: number, item: any) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\nprivate _length: number = null;\nprivate _collection: NgIterable<V> = null;\nprivate _linkedRecords: _DuplicateMap<V> = null;\nprivate _unlinkedRecords: _DuplicateMap<V> = null;\nprivate _previousItHead: IterableChangeRecord_<V> = null;\nprivate _itHead: IterableChangeRecord_<V> = null;\nprivate _itTail: IterableChangeRecord_<V> = null;\nprivate _additionsHead: IterableChangeRecord_<V> = null;\nprivate _additionsTail: IterableChangeRecord_<V> = null;\nprivate _movesHead: IterableChangeRecord_<V> = null;\nprivate _movesTail: IterableChangeRecord_<V> = null;\nprivate _removalsHead: IterableChangeRecord_<V> = null;\nprivate _removalsTail: IterableChangeRecord_<V> = null;\nprivate _identityChangesHead: IterableChangeRecord_<V> = null;\nprivate _identityChangesTail: IterableChangeRecord_<V> = null;\n/**\n * @param {?=} _trackByFn\n */\nconstructor(private _trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = this._trackByFn || trackByIdentity;\n  }\n/**\n * @return {?}\n */\nget collection() { return this._collection; }\n/**\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachOperation(\n      fn: (item: IterableChangeRecord_<V>, previousIndex: number, currentIndex: number) => void) {\n    let /** @type {?} */ nextIt = this._itHead;\n    let /** @type {?} */ nextRemove = this._removalsHead;\n    let /** @type {?} */ addRemoveOffset = 0;\n    let /** @type {?} */ moveOffsets: number[] = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const /** @type {?} */ record = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt :\n          nextRemove;\n      const /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const /** @type {?} */ currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n              const /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const /** @type {?} */ index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const /** @type {?} */ previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} collection\n * @return {?}\n */\ndiff(collection: NgIterable<V>): DefaultIterableDiffer<V> {\n    if (isBlank(collection)) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(`Error trying to diff '${collection}'`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} collection\n * @return {?}\n */\ncheck(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let /** @type {?} */ record: IterableChangeRecord_<V> = this._itHead;\n    let /** @type {?} */ mayBeDirty: boolean = false;\n    let /** @type {?} */ index: number;\n    let /** @type {?} */ item: V;\n    let /** @type {?} */ itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      this._length = collection.length;\n\n      for (let /** @type {?} */ index = 0; index < this._length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n/**\n * Reset the state of the change objects to show no changes. This means set previousKey to\n * currentKey, and clear all of the queues (additions, moves, removals).\n * Set the previousIndexes of moved and added items to their currentIndexes\n * Reset the list of additions, moves and removals\n * \n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: IterableChangeRecord_<V>;\n      let /** @type {?} */ nextRecord: IterableChangeRecord_<V>;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n/**\n * This is the core function which handles differences between collections.\n * \n * - `record` is the record which we saw at this position last time. If null then it is a new\n *   item.\n * - `item` is the current item in the collection\n * - `index` is the position of the item in the collection\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_mismatch(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let /** @type {?} */ previousRecord: IterableChangeRecord_<V>;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n/**\n * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n * \n * Use case: `[a, a]` => `[b, a, a]`\n * \n * If we did not have this check then the insertion of `b` would:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) leave `a` at index `1` as is. <-- this is wrong!\n *   3) reinsert `a` at index 2. <-- this is wrong!\n * \n * The correct behavior is:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) reinsert `a` at index 1.\n *   3) move `a` at from `1` to `2`.\n * \n * \n * Double check that we have not evicted a duplicate item. We need to check if the item type may\n * have already been removed:\n * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n * at the end.\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let /** @type {?} */ reinsertRecord: IterableChangeRecord_<V> =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n/**\n * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n * \n * - `record` The first excess {\\@link IterableChangeRecord_}.\n * \n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_truncate(record: IterableChangeRecord_<V>) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const /** @type {?} */ nextRecord: IterableChangeRecord_<V> = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const /** @type {?} */ prev = record._prevRemoved;\n    const /** @type {?} */ next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_moveAfter(record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>, index: number):\n      IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_addAfter(record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>, index: number):\n      IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>,\n      index: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const /** @type {?} */ next: IterableChangeRecord_<V> = prevRecord === null ? this._itHead : prevRecord._next;\n    // todo(vicb)\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const /** @type {?} */ prev = record._prev;\n    const /** @type {?} */ next = record._next;\n\n    // todo(vicb)\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} toIndex\n * @return {?}\n */\n_addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n/**\n * @param {?} record\n * @return {?}\n */\nprivate _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} item\n * @return {?}\n */\n_addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ list: IterableChangeRecord_<V>[] = [];\n    this.forEachItem((record: IterableChangeRecord_<V>) => list.push(record));\n\n    const /** @type {?} */ previous: IterableChangeRecord_<V>[] = [];\n    this.forEachPreviousItem((record: IterableChangeRecord_<V>) => previous.push(record));\n\n    const /** @type {?} */ additions: IterableChangeRecord_<V>[] = [];\n    this.forEachAddedItem((record: IterableChangeRecord_<V>) => additions.push(record));\n\n    const /** @type {?} */ moves: IterableChangeRecord_<V>[] = [];\n    this.forEachMovedItem((record: IterableChangeRecord_<V>) => moves.push(record));\n\n    const /** @type {?} */ removals: IterableChangeRecord_<V>[] = [];\n    this.forEachRemovedItem((record: IterableChangeRecord_<V>) => removals.push(record));\n\n    const /** @type {?} */ identityChanges: IterableChangeRecord_<V>[] = [];\n    this.forEachIdentityChange((record: IterableChangeRecord_<V>) => identityChanges.push(record));\n\n    return 'collection: ' + list.join(', ') + '\\n' +\n        'previous: ' + previous.join(', ') + '\\n' +\n        'additions: ' + additions.join(', ') + '\\n' +\n        'moves: ' + moves.join(', ') + '\\n' +\n        'removals: ' + removals.join(', ') + '\\n' +\n        'identityChanges: ' + identityChanges.join(', ') + '\\n';\n  }\n}\n\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultIterableDiffer.prototype._length;\n/** @type {?} */\nDefaultIterableDiffer.prototype._collection;\n/** @type {?} */\nDefaultIterableDiffer.prototype._linkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._unlinkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._previousItHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._trackByFn;\n}\n\n/**\n * \\@stable\n */\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number = null;\n  previousIndex: number = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V> = null;\n/**\n * @param {?} item\n * @param {?} trackById\n */\nconstructor(public item: V,\npublic trackById: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                                                      stringify(this.item) + '[' +\n            stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n  }\n}\n\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nIterableChangeRecord_.prototype.currentIndex;\n/** @type {?} */\nIterableChangeRecord_.prototype.previousIndex;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextMoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextIdentityChange;\n/** @type {?} */\nIterableChangeRecord_.prototype.item;\n/** @type {?} */\nIterableChangeRecord_.prototype.trackById;\n}\n\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V> = null;\n/**\n * Append the record to the list of duplicates.\n * \n * Note: by design all records in the list of duplicates hold the same value in record.item.\n * @param {?} record\n * @return {?}\n */\nadd(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // todo(vicb)\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n/**\n * @param {?} trackById\n * @param {?} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number): IterableChangeRecord_<V> {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((afterIndex === null || afterIndex < record.currentIndex) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n/**\n * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * Returns whether the list of duplicates is empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): boolean {\n    // todo(vicb)\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const /** @type {?} */ prev: IterableChangeRecord_<V> = record._prevDup;\n    const /** @type {?} */ next: IterableChangeRecord_<V> = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._head;\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._tail;\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n/**\n * @param {?} record\n * @return {?}\n */\nput(record: IterableChangeRecord_<V>) {\n    const /** @type {?} */ key = record.trackById;\n\n    let /** @type {?} */ duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n/**\n * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n * have already iterated over, we use the afterIndex to pretend it is not there.\n * \n * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n * have any more `a`s needs to return the last `a` not the first or second.\n * @param {?} trackById\n * @param {?=} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number = null): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = trackById;\n    const /** @type {?} */ recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, afterIndex) : null;\n  }\n/**\n * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * The list of duplicates also is removed from the map if it gets empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = record.trackById;\n    const /** @type {?} */ recordList: _DuplicateItemRecordList<V> = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\nget isEmpty(): boolean { return this.map.size === 0; }\n/**\n * @return {?}\n */\nclear() { this.map.clear(); }\n/**\n * @return {?}\n */\ntoString(): string { return '_DuplicateMap(' + stringify(this.map) + ')'; }\n}\n\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n/** @type {?} */\n_DuplicateMap.prototype.map;\n}\n\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item: any, addRemoveOffset: number, moveOffsets: number[]): number {\n  const /** @type {?} */ previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let /** @type {?} */ moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n"]}