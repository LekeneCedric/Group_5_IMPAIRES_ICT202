{"version":3,"sources":["../../../../../modules/@angular/core/src/di/reflective_errors.ts"],"names":[],"mappings":"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","file":"reflective_errors.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {wrappedError} from '../error_handler';\nimport {ERROR_ORIGINAL_ERROR, getOriginalError} from '../errors';\nimport {stringify} from '../facade/lang';\nimport {Type} from '../type';\n\nimport {ReflectiveInjector} from './reflective_injector';\nimport {ReflectiveKey} from './reflective_key';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  const /** @type {?} */ res: any[] = [];\n  for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    const /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n    const /** @type {?} */ tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n\nexport interface InjectionError extends Error {\n  keys: ReflectiveKey[];\n  injectors: ReflectiveInjector[];\n  constructResolvingMessage: (this: InjectionError) => string;\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void;\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(\n    injector: ReflectiveInjector, key: ReflectiveKey,\n    constructResolvingMessage: (this: InjectionError) => string,\n    originalError?: Error): InjectionError {\n  const /** @type {?} */ error = /** @type {?} */(( (originalError ? wrappedError('', originalError) : Error()) as InjectionError));\n  error.addKey = addKey;\n  error.keys = [key];\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  error.message = error.constructResolvingMessage();\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(this: InjectionError, injector: ReflectiveInjector, key: ReflectiveKey): void {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  this.message = this.constructResolvingMessage();\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n * \n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(this: InjectionError) {\n    const /** @type {?} */ first = stringify(this.keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(this.keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n * \n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n * \n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n * \n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n * \n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(\n    injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(this: InjectionError) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(this.keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n * \n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(\n    injector: ReflectiveInjector, originalException: any, originalStack: any,\n    key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(this: InjectionError) {\n    const /** @type {?} */ first = stringify(this.keys[0].token);\n    return `${getOriginalError(this).message}: Error during instantiation of ${first}!${constructResolvingPath(this.keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n * \n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider: any) {\n  return Error(\n      `Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n * \n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n * \n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * \n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n * \n * ```typescript\n * class B {}\n * \n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n * \n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n * \\@stable\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc: Type<any>| Function, params: any[][]): Error {\n  const /** @type {?} */ signature: string[] = [];\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n    const /** @type {?} */ parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error(\n      'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n      signature.join(', ') + '). ' +\n      'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n      stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n * \n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n * \n * ```typescript\n * class A {}\n * \n * var injector = Injector.resolveAndCreate([A]);\n * \n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n * \\@stable\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index: number) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n * \n * ### Example\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(\n    provider1: any, provider2: any): Error {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n"]}