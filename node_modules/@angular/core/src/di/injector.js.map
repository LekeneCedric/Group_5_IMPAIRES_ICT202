{"version":3,"sources":["../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAS,MAAA,gBAAA,CAAA;AAKlB,IAAM,gBAAgB,CAAhB,mBAAA,GAAsB,IAAI,MAAA,EAAO,CAAE;AACzC,MAAM,CAAC,IAAA,gBAAA,CAAM,kBAAA,GAAqB,mBAAA,CAAoB;AACtD;IAAA;IAYA,CAAC;IAXD;;;;OAIG;IACH,2BAJG,GAIH,UAJG,KAAA,EAAA,aAAA;QAAA,8BAAA,EAAA,mCAAA;QAKC,EAAE,CAAC,CAAC,aAJC,KAAiB,mBAAA,CAAoB,CAAC,CAAA;YAKzC,MAJM,IAAI,KAAA,CAAM,qBAAC,SAAmB,CAAS,KAAC,CAAK,MAAC,CAAG,CAAC;QAK1D,CAAC;QACD,MAAM,CAJC,aAAA,CAAc;IAKvB,CAAC;IACH,oBAAC;AAAD,CAZA,AAYC,IAAA;AACD;;;;;;;;;;;;;;;;;;;;GAoBG;AACH;IAAA;IAwBA,CAAC;IArBD;;;;;;;;;;OAUG;IACH,sBAPY,GAOZ,UAPY,KAAA,EAAA,aAAA,IAAA,CAAA;IAQZ;;;;;;;OAOG;IACH,sBAXY,GAWZ,UAXY,KAAA,EAAA,aAAA,IAAA,CAAA;IAYZ,eAAC;AAAD,CAxBA,AAwBC;;AA3BQ,2BAAA,GAAqB,mBAAA,CAAoB;AACzC,aAAA,GAAiB,IAAI,aAAA,EAAc,CAAE;AA4B9C;IACA,gBAAgB;IAChB,QAAQ,CAAC,kBAAkB,CAAC;IAC5B,gBAAgB;IAChB,QAAQ,CAAC,IAAI,CAAC;AACd,CAAC","file":"injector.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../facade/lang';\nimport {Type} from '../type';\n\nimport {InjectionToken} from './injection_token';\n\nconst /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport const /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nclass _NullInjector implements Injector {\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new Error(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n/**\n * \\@whatItDoes Injector interface\n * \\@howToUse \n * ```\n * const injector: Injector = ...;\n * injector.get(...);\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n * \n * `Injector` returns itself when given `Injector` as a token:\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n/**\n * Retrieves an instance from the injector based on the provided token.\n * If not found:\n * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n * Injector.THROW_IF_NOT_FOUND is given\n * - Returns the `notFoundValue` otherwise\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T) {}\n/**\n * @deprecated from v4.0.0 use Type<T> or InjectToken<T>\n * @suppress {duplicate}\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any) {}\n}\n\nfunction Injector_tsickle_Closure_declarations() {\n/** @type {?} */\nInjector.THROW_IF_NOT_FOUND;\n/** @type {?} */\nInjector.NULL;\n}\n\n"]}