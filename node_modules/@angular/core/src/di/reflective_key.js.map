{"version":3,"sources":["../../../../../modules/@angular/core/src/di/reflective_key.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAS,MAAA,gBAAA,CAAA;AAElB,OAAO,EAAA,iBAAE,EAAiB,MAAA,eAAA,CAAA;AAC1B;;;;;;;;;;;;;;;GAeG;AACH;IACA;;;;OAIG;IACH,uBAAqB,KAAO,EAAe,EAAI;QAA1B,UAAA,GAAA,KAAA,CAAO;QAAe,OAAA,GAAA,EAAA,CAAI;QAE3C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAKH,sBADG,sCAAA;QAHH;;;WAGG;aACH,cAD8B,MAAA,CAAO,SAAA,CAAU,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC,CAAA;;;OAAA;IAE5D;;;;OAIG;IADA,iBAAA,GAEH,UAFG,KAAA;QAGC,MAAM,CAFC,kBAAA,CAAmB,GAAC,CAAG,iBAAC,CAAiB,KAAC,CAAK,CAAC,CAAC;IAG1D,CAAC;IAIH,sBADG,6BAAA;QAFH;;WAEG;aACH,cADsC,MAAA,CAAO,kBAAA,CAAmB,YAAC,CAAY,CAAC,CAAA;;;OAAA;IAE9E,oBAAC;AAAD,CA7BA,AA6BC,IAAA;;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;AAC3B,CAAC;AAED;;GAEG;AACH;IAAA;QAPU,aAAA,GAAW,IAAI,GAAA,EAA0B,CAAG;IA4BtD,CAAC;IAnBD;;;OAGG;IACH,yBAXG,GAWH,UAXG,KAAA;QAYC,EAAE,CAAC,CAAC,KAXC,YAAgB,aAAA,CAAc;YAAC,MAAA,CAAO,KAAA,CAAM;QAajD,EAAE,CAAC,CAAC,IAXC,CAAI,QAAC,CAAQ,GAAC,CAAG,KAAC,CAAK,CAAC,CAAC,CAAA;YAY5B,MAAM,CAXC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,KAAC,CAAK,CAAC;QAYlC,CAAC;QAED,IAAM,gBAAgB,CAXhB,MAAA,GAAS,IAAI,aAAA,CAAc,KAAC,EAAM,aAAA,CAAc,YAAC,CAAY,CAAC;QAYpE,IAAI,CAXC,QAAC,CAAQ,GAAC,CAAG,KAAC,EAAM,MAAA,CAAO,CAAC;QAYjC,MAAM,CAXC,MAAA,CAAO;IAYhB,CAAC;IAIH,sBAbG,qCAAA;QAUH;;WAEG;aACH,cAb+B,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,IAAC,CAAI,CAAC,CAAA;;;OAAA;IAc1D,kBAAC;AAAD,CArBA,AAqBC,IAAA;;AAED;IACA,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC/B,CAAC;AAGD,IAAM,gBAAgB,CAnBhB,kBAAA,GAAqB,IAAI,WAAA,EAAY,CAAE","file":"reflective_key.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../facade/lang';\n\nimport {resolveForwardRef} from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n * \n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n * \n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n * \n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * \\@experimental\n */\nexport class ReflectiveKey {\n/**\n * Private\n * @param {?} token\n * @param {?} id\n */\nconstructor(public token: Object,\npublic id: number) {\n    if (!token) {\n      throw new Error('Token must be defined!');\n    }\n  }\n/**\n * Returns a stringified token.\n * @return {?}\n */\nget displayName(): string { return stringify(this.token); }\n/**\n * Retrieves a `Key` for a token.\n * @param {?} token\n * @return {?}\n */\nstatic get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n/**\n * @return {?} the number of keys registered in the system.\n */\nstatic get numberOfKeys(): number { return _globalKeyRegistry.numberOfKeys; }\n}\n\nfunction ReflectiveKey_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveKey.prototype.token;\n/** @type {?} */\nReflectiveKey.prototype.id;\n}\n\n/**\n * \\@internal\n */\nexport class KeyRegistry {\nprivate _allKeys = new Map<Object, ReflectiveKey>();\n/**\n * @param {?} token\n * @return {?}\n */\nget(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n\n    const /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n/**\n * @return {?}\n */\nget numberOfKeys(): number { return this._allKeys.size; }\n}\n\nfunction KeyRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyRegistry.prototype._allKeys;\n}\n\n\nconst /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n"]}