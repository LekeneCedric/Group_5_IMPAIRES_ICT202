{"version":3,"sources":["../../../../../modules/@angular/core/src/di/reflective_provider.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAS,MAAA,0BAAA,CAAA;AAClB,OAAO,EAAA,IAAE,EAAI,MAAA,SAAA,CAAA;AAEb,OAAO,EAAA,iBAAE,EAAiB,MAAA,eAAA,CAAA;AAC1B,OAAO,EAAO,MAAA,EAAQ,QAAA,EAAU,IAAA,EAAM,QAAA,EAAS,MAAA,YAAA,CAAA;AAE/C,OAAO,EAAA,oBAAE,EAAqB,6CAAA,EAA+C,iBAAA,EAAkB,MAAA,qBAAA,CAAA;AAC/F,OAAO,EAAA,aAAE,EAAa,MAAA,kBAAA,CAAA;AAKtB;;;GAGG;AACH;IACA;;;;OAIG;IACH,8BAHa,GAAK,EAAsB,QAAU,EAAgB,UAAkB;QAAvE,QAAA,GAAA,GAAA,CAAK;QAAsB,aAAA,GAAA,QAAA,CAAU;QAAgB,eAAA,GAAA,UAAA,CAAkB;IAAQ,CAAA;IAO5F;;;OAGG;IARA,4BAAA,GASH,UATG,GAAA;QAUC,MAAM,CATC,IAAI,oBAAA,CAAqB,GAAC,EAAI,KAAA,EAAO,IAAA,CAAK,CAAC;IAUpD,CAAC;IACH,2BAAC;AAAD,CAjBA,AAiBC,IAAA;;AAED;IACA,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,GAAG,CAAC;IACnC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACxC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC;AAC1C,CAAC;AAGD,IAAM,gBAAgB,CAnBhB,WAAA,GAAqB,EAAA,CAAG;AAuD9B;IACA;;;;OAIG;IACH,qCAtBa,GAAK,EAAsB,iBAA6C,EACxE,aAAe;QADf,QAAA,GAAA,GAAA,CAAK;QAAsB,sBAAA,GAAA,iBAAA,CAA6C;QACxE,kBAAA,GAAA,aAAA,CAAe;IAAQ,CAAA;IA4BpC,sBA1BG,wDAAA;QAuBH;;WAEG;aACH,cA1BqD,MAAA,CAAO,IAAA,CAAK,iBAAC,CAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;;;OAAA;IA2BvF,kCAAC;AAAD,CAdA,AAcC,IAAA;;AAED;IACA,gBAAgB;IAChB,2BAA2B,CAAC,SAAS,CAAC,GAAG,CAAC;IAC1C,gBAAgB;IAChB,2BAA2B,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACxD,gBAAgB;IAChB,2BAA2B,CAAC,SAAS,CAAC,aAAa,CAAC;AACpD,CAAC;AAED;;;;GAIG;AACH;IACA;;;OAGG;IACH,mCAnCa,OAAS,EAKT,YAAmC;QALnC,YAAA,GAAA,OAAA,CAAS;QAKT,iBAAA,GAAA,YAAA,CAAmC;IAAE,CAAA;IAiClD,gCAAC;AAAD,CARA,AAQC,IAAA;;AAED;IACA;;;OAGG;IACH,yBAAyB,CAAC,SAAS,CAAC,OAAO,CAAC;IAC5C;;;OAGG;IACH,yBAAyB,CAAC,SAAS,CAAC,YAAY,CAAC;AACjD,CAAC;AAED;;;;GAIG;AACH,kCA9CC,QAAA;IA+CC,IAAI,gBAAgB,CA9ChB,SAAW,CAAS;IA+CxB,IAAI,gBAAgB,CA9ChB,YAAmC,CAAE;IA+CzC,EAAE,CAAC,CAAC,QA9CC,CAAQ,QAAC,CAAQ,CAAC,CAAA;QA+CrB,IAAM,gBAAgB,CA9ChB,QAAA,GAAW,iBAAA,CAAkB,QAAC,CAAQ,QAAC,CAAQ,CAAC;QA+CtD,SAAS,GA9CG,SAAA,CAAU,OAAC,CAAO,QAAC,CAAQ,CAAC;QA+CxC,YAAY,GA9CG,gBAAA,CAAiB,QAAC,CAAQ,CAAC;IA+C5C,CAAC;IA9CC,IAAA,CAAK,EAAA,CAAA,CAAA,QAAK,CAAQ,WAAC,CAAW,CAAC,CAAA;QA+C/B,SAAS,GA9CG,UAAA,aAAgB,IAAQ,OAAA,aAAA,EAAA,CAAA,CAAc;QA+ClD,YAAY,GA9CG,CAAA,oBAAE,CAAoB,OAAC,CAAO,aAAC,CAAa,GAAC,CAAG,QAAC,CAAQ,WAAC,CAAW,CAAC,CAAC,CAAC;IA+CzF,CAAC;IA9CC,IAAA,CAAK,EAAA,CAAA,CAAA,QAAK,CAAQ,UAAC,CAAU,CAAC,CAAA;QA+C9B,SAAS,GA9CG,QAAA,CAAS,UAAC,CAAU;QA+ChC,YAAY,GA9CG,qBAAA,CAAsB,QAAC,CAAQ,UAAC,EAAW,QAAA,CAAS,IAAC,CAAI,CAAC;IA+C3E,CAAC;IA9CC,IAAA,CAAK,CAAA;QA+CL,SAAS,GA9CG,cAAM,OAAA,QAAA,CAAS,QAAC,EAAV,CAAU,CAAQ;QA+CpC,YAAY,GA9CG,WAAA,CAAY;IA+C7B,CAAC;IACD,MAAM,CA9CC,IAAI,yBAAA,CAA0B,SAAC,EAAU,YAAA,CAAa,CAAC;AA+ChE,CAAC;AACD;;;;;;;GAOG;AACH,mCA/CC,QAAA;IAgDC,MAAM,CA/CC,IAAI,2BAAA,CAgDP,aAAa,CA/CC,GAAC,CAAG,QAAC,CAAQ,OAAC,CAAO,EAAE,CAAA,wBAAE,CAAwB,QAAC,CAAQ,CAAC,EAAE,QAAA,CAAS,KAAC,CAAK,CAAC;AAgDjG,CAAC;AACD;;;;GAIG;AACH,MAhDC,qCAAA,SAAA;IAiDC,IAAM,gBAAgB,CAhDhB,UAAA,GAAa,mBAAA,CAAoB,SAAC,EAAU,EAAA,CAAG,CAAC;IAiDtD,IAAM,gBAAgB,CAhDhB,QAAA,GAAW,UAAA,CAAW,GAAC,CAAG,yBAAC,CAAyB,CAAC;IAiD3D,IAAM,gBAAgB,CAhDhB,mBAAA,GAAsB,gCAAA,CAAiC,QAAC,EAAS,IAAI,GAAA,EAAI,CAAE,CAAC;IAiDlF,MAAM,CAhDC,KAAA,CAAM,IAAC,CAAI,mBAAC,CAAmB,MAAC,EAAM,CAAE,CAAC;AAiDlD,CAAC;AACD;;;;;;;GAOG;AACH,MAlDC,2CAmDG,SAAuC,EACvC,sBAA+D;IAEjE,GAAG,CAAC,CAAC,IAlDC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,SAAA,CAAU,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QAmDzC,IAAM,gBAAgB,CAlDhB,QAAA,GAAW,SAAA,CAAU,CAAC,CAAC,CAAC;QAmD9B,IAAM,gBAAgB,CAlDhB,QAAA,GAAW,sBAAA,CAAuB,GAAC,CAAG,QAAC,CAAQ,GAAC,CAAG,EAAC,CAAE,CAAC;QAmD7D,EAAE,CAAC,CAAC,QAlDC,CAAQ,CAAC,CAAA;YAmDZ,EAAE,CAAC,CAAC,QAlDC,CAAQ,aAAC,KAAiB,QAAA,CAAS,aAAC,CAAa,CAAC,CAAA;gBAmDrD,MAlDM,6CAAA,CAA8C,QAAC,EAAS,QAAA,CAAS,CAAC;YAmD1E,CAAC;YACD,EAAE,CAAC,CAAC,QAlDC,CAAQ,aAAC,CAAa,CAAC,CAAA;gBAmD1B,GAAG,CAAC,CAAC,IAlDC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,iBAAC,CAAiB,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;oBAmD1D,QAAQ,CAlDC,iBAAC,CAAiB,IAAC,CAAI,QAAC,CAAQ,iBAAC,CAAiB,CAAC,CAAC,CAAC,CAAC;gBAmDjE,CAAC;YACH,CAAC;YAlDC,IAAA,CAAK,CAAA;gBAmDL,sBAAsB,CAlDC,GAAC,CAAG,QAAC,CAAQ,GAAC,CAAG,EAAC,EAAG,QAAA,CAAS,CAAC;YAmDxD,CAAC;QACH,CAAC;QAlDC,IAAA,CAAK,CAAA;YAmDL,IAAI,gBAAgB,CAlDhB,gBAAA,SAAkB,CAA2B;YAmDjD,EAAE,CAAC,CAAC,QAlDC,CAAQ,aAAC,CAAa,CAAC,CAAA;gBAmD1B,gBAAgB,GAlDG,IAAI,2BAAA,CAmDnB,QAAQ,CAlDC,GAAC,EAAI,QAAA,CAAS,iBAAC,CAAiB,KAAC,EAAK,EAAG,QAAA,CAAS,aAAC,CAAa,CAAC;YAmDhF,CAAC;YAlDC,IAAA,CAAK,CAAA;gBAmDL,gBAAgB,GAlDG,QAAA,CAAS;YAmD9B,CAAC;YACD,sBAAsB,CAlDC,GAAC,CAAG,QAAC,CAAQ,GAAC,CAAG,EAAC,EAAG,gBAAA,CAAiB,CAAC;QAmDhE,CAAC;IACH,CAAC;IACD,MAAM,CAlDC,sBAAA,CAAuB;AAmDhC,CAAC;AACD;;;;GAIG;AACH,6BAtDC,SAAA,EAAA,GAAA;IAuDC,SAAS,CAtDC,OAAC,CAAO,UAAA,CAAC;QAuDjB,EAAE,CAAC,CAAC,CAtDC,YAAY,IAAA,CAAK,CAAC,CAAA;YAuDrB,GAAG,CAtDC,IAAC,CAAI,EAAC,OAAC,EAAQ,CAAA,EAAG,QAAA,EAAU,CAAA,EAAE,CAAC,CAAC;QAwDtC,CAAC;QAtDC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,IAAI,OAAO,CAAA,IAAK,QAAA,IAAY,CAAA,CAAA,CAAM,CAAA,CAAI,CAAC,OAAC,KAAW,SAAA,CAAU,CAAC,CAAA;YAuDxE,GAAG,CAtDC,IAAC,CAAI,gBAAA,CAAA,CAAA,CAAK,CAAA,CAAmB,CAAC;QAwDpC,CAAC;QAtDC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,YAAY,KAAA,CAAM,CAAC,CAAA;YAuD7B,mBAAmB,CAtDC,CAAC,EAAE,GAAA,CAAI,CAAC;QAwD9B,CAAC;QAtDC,IAAA,CAAK,CAAA;YAuDL,MAtDM,oBAAA,CAAqB,CAAC,CAAC,CAAC;QAuDhC,CAAC;IACH,CAAC,CAtDC,CAAC;IAwDH,MAAM,CAtDC,GAAA,CAAI;AAuDb,CAAC;AACD;;;;GAIG;AACH,MA1DC,gCA2DG,UAAe,EAAE,YAAmB;IACtC,EAAE,CAAC,CAAC,CA1DC,YAAC,CAAY,CAAC,CAAA;QA2DjB,MAAM,CA1DC,gBAAA,CAAiB,UAAC,CAAU,CAAC;IA2DtC,CAAC;IA1DC,IAAA,CAAK,CAAA;QA2DL,IAAM,gBAAgB,CA1DhB,QAAA,GAAkB,YAAA,CAAa,GAAC,CAAG,UAAA,CAAC,IAAI,OAAA,CAAA,CAAE,CAAC,EAAH,CAAG,CAAC,CAAC;QA2DnD,MAAM,CA1DC,YAAA,CAAa,GAAC,CAAG,UAAA,CAAC,IAAI,OAAA,aAAA,CAAc,UAAC,EAAW,CAAA,EAAG,QAAA,CAAO,EAApC,CAAoC,CAAC,CAAC;IA2DrE,CAAC;AACH,CAAC;AACD;;;GAGG;AACH,0BA7DC,UAAA;IA8DC,IAAM,gBAAgB,CA7DhB,MAAA,GAAS,SAAA,CAAU,UAAC,CAAU,UAAC,CAAU,CAAC;IA+DhD,EAAE,CAAC,CAAC,CA7DC,MAAC,CAAM;QAAC,MAAA,CAAO,EAAA,CAAG;IA8DvB,EAAE,CAAC,CAAC,MA7DC,CAAM,IAAC,CAAI,UAAA,CAAC,IAAI,OAAA,CAAA,IAAK,IAAA,EAAL,CAAK,CAAK,CAAC,CAAC,CAAA;QA8D/B,MA7DM,iBAAA,CAAkB,UAAC,EAAW,MAAA,CAAO,CAAC;IA8D9C,CAAC;IACD,MAAM,CA7DC,MAAA,CAAO,GAAC,CAAG,UAAA,CAAC,IAAI,OAAA,aAAA,CAAc,UAAC,EAAW,CAAA,EAAG,MAAA,CAAO,EAApC,CAAoC,CAAC,CAAC;AA8D/D,CAAC;AACD;;;;;GAKG;AACH,uBACI,UAAe,EAAE,QAAqB,EAAE,MAAe;IACzD,IAAI,gBAAgB,CAlEhB,KAAA,GAAa,IAAA,CAAK;IAmEtB,IAAI,gBAAgB,CAlEhB,QAAA,GAAW,KAAA,CAAM;IAoErB,EAAE,CAAC,CAAC,CAlEC,KAAC,CAAK,OAAC,CAAO,QAAC,CAAQ,CAAC,CAAC,CAAA;QAmE5B,EAAE,CAAC,CAAC,QAlEC,YAAmB,MAAA,CAAO,CAAC,CAAA;YAmE9B,MAAM,CAlEC,iBAAA,CAAkB,QAAC,CAAQ,OAAC,CAAO,EAAE,QAAA,EAAU,IAAA,CAAK,CAAC;QAmE9D,CAAC;QAlEC,IAAA,CAAK,CAAA;YAmEL,MAAM,CAlEC,iBAAA,CAAkB,QAAC,EAAS,QAAA,EAAU,IAAA,CAAK,CAAC;QAmErD,CAAC;IACH,CAAC;IAED,IAAI,gBAAgB,CAlEhB,UAAA,GAA4B,IAAA,CAAK;IAoErC,GAAG,CAAC,CAAC,IAlEC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,EAAA,CAAG,EAAE,CAAA;QAmExC,IAAM,gBAAgB,CAlEhB,aAAA,GAAgB,QAAA,CAAS,CAAC,CAAC,CAAC;QAoElC,EAAE,CAAC,CAAC,aAlEC,YAAwB,IAAA,CAAK,CAAC,CAAA;YAmEjC,KAAK,GAlEG,aAAA,CAAc;QAoExB,CAAC;QAlEC,IAAA,CAAK,EAAA,CAAA,CAAA,aAAK,YAAwB,MAAA,CAAO,CAAC,CAAA;YAmE1C,KAAK,GAlEG,aAAA,CAAc,OAAC,CAAO,CAAC;QAoEjC,CAAC;QAlEC,IAAA,CAAK,EAAA,CAAA,CAAA,aAAK,YAAwB,QAAA,CAAS,CAAC,CAAA;YAmE5C,QAAQ,GAlEG,IAAA,CAAK;QAoElB,CAAC;QAlEC,IAAA,CAAK,EAAA,CAAA,CAAA,aAAK,YAAwB,IAAA,IAAQ,aAAA,YAAyB,QAAA,CAAS,CAAC,CAAA;YAmE7E,UAAU,GAlEG,aAAA,CAAc;QAmE7B,CAAC;IACH,CAAC;IAED,KAAK,GAlEG,iBAAA,CAAkB,KAAC,CAAK,CAAC;IAoEjC,EAAE,CAAC,CAAC,KAlEC,IAAQ,IAAA,CAAK,CAAC,CAAA;QAmEjB,MAAM,CAlEC,iBAAA,CAAkB,KAAC,EAAM,QAAA,EAAU,UAAA,CAAW,CAAC;IAmExD,CAAC;IAlEC,IAAA,CAAK,CAAA;QAmEL,MAlEM,iBAAA,CAAkB,UAAC,EAAW,MAAA,CAAO,CAAC;IAmE9C,CAAC;AACH,CAAC;AACD;;;;;GAKG;AACH,2BACI,KAAU,EAAE,QAAiB,EAAE,UAA2B;IAC5D,MAAM,CAvEC,IAAI,oBAAA,CAAqB,aAAC,CAAa,GAAC,CAAG,KAAC,CAAK,EAAE,QAAA,EAAU,UAAA,CAAW,CAAC;AAwElF,CAAC","file":"reflective_provider.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {reflector} from '../reflection/reflection';\nimport {Type} from '../type';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {Host, Inject, Optional, Self, SkipSelf} from './metadata';\nimport {ClassProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ValueProvider} from './provider';\nimport {invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError} from './reflective_errors';\nimport {ReflectiveKey} from './reflective_key';\n\n\ninterface NormalizedProvider extends TypeProvider, ValueProvider, ClassProvider, ExistingProvider,\n    FactoryProvider {}\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport class ReflectiveDependency {\n/**\n * @param {?} key\n * @param {?} optional\n * @param {?} visibility\n */\nconstructor(\npublic key: ReflectiveKey,\npublic optional: boolean,\npublic visibility: Self|SkipSelf) {}\n/**\n * @param {?} key\n * @return {?}\n */\nstatic fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\n\nfunction ReflectiveDependency_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveDependency.prototype.key;\n/** @type {?} */\nReflectiveDependency.prototype.optional;\n/** @type {?} */\nReflectiveDependency.prototype.visibility;\n}\n\n\nconst /** @type {?} */ _EMPTY_LIST: any[] = [];\n\n/**\n * An internal resolved representation of a {@link Provider} used by the {@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @experimental\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type<any>`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n/**\n * @param {?} key\n * @param {?} resolvedFactories\n * @param {?} multiProvider\n */\nconstructor(\npublic key: ReflectiveKey,\npublic resolvedFactories: ResolvedReflectiveFactory[],\npublic multiProvider: boolean) {}\n/**\n * @return {?}\n */\nget resolvedFactory(): ResolvedReflectiveFactory { return this.resolvedFactories[0]; }\n}\n\nfunction ResolvedReflectiveProvider__tsickle_Closure_declarations() {\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.key;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.resolvedFactories;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.multiProvider;\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nexport class ResolvedReflectiveFactory {\n/**\n * @param {?} factory\n * @param {?} dependencies\n */\nconstructor(\npublic factory: Function,\npublic dependencies: ReflectiveDependency[]) {}\n}\n\nfunction ResolvedReflectiveFactory_tsickle_Closure_declarations() {\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.factory;\n/**\n * Arguments (dependencies) to the `factory` function.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.dependencies;\n}\n\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider: NormalizedProvider): ResolvedReflectiveFactory {\n  let /** @type {?} */ factoryFn: Function;\n  let /** @type {?} */ resolvedDeps: ReflectiveDependency[];\n  if (provider.useClass) {\n    const /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = (aliasInstance: any) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n * \n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n * convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider: NormalizedProvider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(\n      ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[] {\n  const /** @type {?} */ normalized = _normalizeProviders(providers, []);\n  const /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n  const /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(\n    providers: ResolvedReflectiveProvider[],\n    normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n    Map<number, ResolvedReflectiveProvider> {\n  for (let /** @type {?} */ i = 0; i < providers.length; i++) {\n    const /** @type {?} */ provider = providers[i];\n    const /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let /** @type {?} */ resolvedProvider: ResolvedReflectiveProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n            provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers: Provider[], res: Provider[]): Provider[] {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({provide: b, useClass: b});\n\n    } else if (b && typeof b == 'object' && ( /** @type {?} */((b as any))).provide !== undefined) {\n      res.push( /** @type {?} */((b as NormalizedProvider)));\n\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} dependencies\n * @return {?}\n */\nexport function constructDependencies(\n    typeOrFunc: any, dependencies: any[]): ReflectiveDependency[] {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const /** @type {?} */ params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  const /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(\n    typeOrFunc: any, metadata: any[] | any, params: any[][]): ReflectiveDependency {\n  let /** @type {?} */ token: any = null;\n  let /** @type {?} */ optional = false;\n\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata['token'], optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n\n  let /** @type {?} */ visibility: Self|SkipSelf = null;\n\n  for (let /** @type {?} */ i = 0; i < metadata.length; ++i) {\n    const /** @type {?} */ paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata['token'];\n\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(\n    token: any, optional: boolean, visibility: Self | SkipSelf): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n"]}