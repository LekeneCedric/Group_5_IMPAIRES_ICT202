{"version":3,"sources":["../../../../../modules/@angular/core/src/di/forward_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAS,MAAA,gBAAA,CAAA;AAalB;;;;;;;;;;;;;GAaG;AACH,MADC,qBAAA,YAAA;IAEC,CAAkB,CADZ,YAAC,CAAA,CAAY,CAAC,eAAC,GAAiB,UAAA,CAAW;IAEjD,CAAkB,CADZ,YAAC,CAAA,CAAY,CAAC,QAAC,GAAU,cAAa,MAAA,CAAO,SAAA,CAAU,IAAC,EAAI,CAAE,CAAC,CAAC,CAAA,CAAE;IAExE,MAAM,CADC,CAAA,CAAY,CAAK,YAAC,CAAA,CAAA,CAAY,CAAC;AAExC,CAAC;AACD;;;;;;;;;;;;;GAaG;AACH,MAFC,4BAAA,IAAA;IAGC,EAAE,CAAC,CAAC,OAFO,IAAA,KAAS,UAAA,IAAc,IAAA,CAAK,cAAC,CAAc,iBAAC,CAAiB;QAGpE,IAAI,CAFC,eAAC,KAAmB,UAAA,CAAW,CAAC,CAAA;QAGvC,MAAM,CAFC,CAAA,CAAe,IAAC,CAAA,CAAI,EAAC,CAAE;IAGhC,CAAC;IAFC,IAAA,CAAK,CAAA;QAGL,MAAM,CAFC,IAAA,CAAK;IAGd,CAAC;AACH,CAAC","file":"forward_ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../facade/lang';\nimport {Type} from '../type';\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn { (): any; }\n/**\n * Allows to refer to references which are not yet defined.\n * \n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n * \n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  ( /** @type {?} */((<any>forwardRefFn))).__forward_ref__ = forwardRef;\n  ( /** @type {?} */((<any>forwardRefFn))).toString = function() { return stringify(this()); };\n  return ( /** @type {?} */((<Type<any>> /** @type {?} */((<any>forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * \n * Acts as the identity function when given a non-forward-ref value.\n * \n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n * \n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n * \n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type: any): any {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n      type.__forward_ref__ === forwardRef) {\n    return ( /** @type {?} */((<ForwardRefFn>type)))();\n  } else {\n    return type;\n  }\n}\n"]}