{"version":3,"sources":["../../../../../modules/@angular/core/src/testability/testability.ts"],"names":[],"mappings":"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","file":"testability.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../facade/lang';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @experimental\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nexport class Testability implements PublicTestability {\n  /** @internal */\n  _pendingCount: number = 0;\n  /** @internal */\n  _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  _didWork: boolean = false;\n  /** @internal */\n  _callbacks: Function[] = [];\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { this._watchAngularEvents(); }\n/**\n * \\@internal\n * @return {?}\n */\n_watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n/**\n * @return {?}\n */\nincreasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\ndecreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\nisStable(): boolean {\n    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          (this._callbacks.pop())(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Not Ready\n      this._didWork = true;\n    }\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nwhenStable(callback: Function): void {\n    this._callbacks.push(callback);\n    this._runCallbacksIfReady();\n  }\n/**\n * @return {?}\n */\ngetPendingRequestCount(): number { return this._pendingCount; }\n/**\n * @deprecated use findProviders\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindBindings(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n/**\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction Testability_tsickle_Closure_declarations() {\n/** @type {?} */\nTestability.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestability.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._pendingCount;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._isZoneStable;\n/**\n * Whether any work was done since the last 'whenStable' callback. This is\n * useful to detect if this could have potentially destabilized another\n * component while it is stabilizing.\n * \\@internal\n * @type {?}\n */\nTestability.prototype._didWork;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._callbacks;\n/** @type {?} */\nTestability.prototype._ngZone;\n}\n\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\nconstructor() { _testabilityGetter.addToWindow(this); }\n/**\n * @param {?} token\n * @param {?} testability\n * @return {?}\n */\nregisterApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n/**\n * @param {?} elem\n * @return {?}\n */\ngetTestability(elem: any): Testability { return this._applications.get(elem); }\n/**\n * @return {?}\n */\ngetAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n/**\n * @return {?}\n */\ngetAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n/**\n * @param {?} elem\n * @param {?=} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TestabilityRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nTestabilityRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestabilityRegistry.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestabilityRegistry.prototype._applications;\n}\n\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability;\n}\nclass _NoopGetTestability implements GetTestability {\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {}\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability {\n    return null;\n  }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet /** @type {?} */ _testabilityGetter: GetTestability = new _NoopGetTestability();\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}