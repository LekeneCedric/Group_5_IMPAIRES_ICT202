{"version":3,"sources":["../../../../../modules/@angular/core/src/util/lang.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAA,YAAE,IAAe,gBAAA,EAAiB,MAAA,wBAAA,CAAA;AACzC;;;;GAIG;AACH,MADC,oBAAA,GAAA;IAEC,2CAA2C;IAC3C,qEAAqE;IACrE,MAAM,CADC,CAAA,CAAE,GAAC,IAAM,OAAO,GAAA,CAAI,IAAC,KAAQ,UAAA,CAAW;AAEjD,CAAC;AACD;;;;GAIG;AACH,MAFC,uBAAA,GAAA;IAGC,MAAM,CAFC,CAAA,CAAE,CAAC,GAAC,IAAM,GAAA,CAAI,gBAAC,CAAgB,CAAC,CAAC;AAG1C,CAAC","file":"lang.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {$$observable as symbolObservable} from 'rxjs/symbol/observable';\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nexport function isPromise(obj: any): obj is Promise<any> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n * @param {?} obj\n * @return {?}\n */\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n  return !!(obj && obj[symbolObservable]);\n}\n"]}