{"version":3,"sources":["../../../../../modules/@angular/core/src/zone/ng_zone.ts"],"names":[],"mappings":"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","file":"ng_zone.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '../facade/async';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n * \n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link run}.\n * \n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n * \n * ### Example\n * \n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n * \n * \\@Component({ \n *   selector: 'ng-zone-demo'.\n *   template: `\n *     <h2>Demo: NgZone</h2>\n * \n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n * \n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n * \n *   constructor(private _ngZone: NgZone) {}\n * \n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n * \n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *       // reenter the Angular zone and display done\n *       this._ngZone.run(() => {console.log('Outside Done!') });\n *     }}));\n *   }\n * \n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n * \n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class NgZone {\nprivate outer: Zone;\nprivate inner: Zone;\nprivate _hasPendingMicrotasks: boolean = false;\nprivate _hasPendingMacrotasks: boolean = false;\nprivate _isStable = true;\nprivate _nesting: number = 0;\nprivate _onUnstable: EventEmitter<any> = new EventEmitter(false);\nprivate _onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\nprivate _onStable: EventEmitter<any> = new EventEmitter(false);\nprivate _onErrorEvents: EventEmitter<any> = new EventEmitter(false);\n/**\n * @param {?} __0\n */\nconstructor({enableLongStackTrace = false}) {\n    if (typeof Zone == 'undefined') {\n      throw new Error('Angular requires Zone.js prolyfill.');\n    }\n\n    Zone.assertZonePatched();\n\n    this.outer = this.inner = Zone.current;\n\n    if ((Zone as any)['wtfZoneSpec']) {\n      this.inner = this.inner.fork((Zone as any)['wtfZoneSpec']);\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      this.inner = this.inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n\n    this.forkInnerZoneWithAngularBehavior();\n  }\n/**\n * @return {?}\n */\nstatic isInAngularZone(): boolean { return Zone.current.get('isAngularZone') === true; }\n/**\n * @return {?}\n */\nstatic assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n/**\n * @return {?}\n */\nstatic assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n/**\n * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n * the function.\n * \n * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n * outside of the Angular zone (typically started via {\\@link runOutsideAngular}).\n * \n * Any future tasks or microtasks scheduled from within this function will continue executing from\n * within the Angular zone.\n * \n * If a synchronous error happens it will be rethrown and not reported via `onError`.\n * @param {?} fn\n * @return {?}\n */\nrun(fn: () => any): any { return this.inner.run(fn); }\n/**\n * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n * rethrown.\n * @param {?} fn\n * @return {?}\n */\nrunGuarded(fn: () => any): any { return this.inner.runGuarded(fn); }\n/**\n * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n * the function.\n * \n * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n * \n * Any future tasks or microtasks scheduled from within this function will continue executing from\n * outside of the Angular zone.\n * \n * Use {\\@link run} to reenter the Angular zone and do work that updates the application model.\n * @param {?} fn\n * @return {?}\n */\nrunOutsideAngular(fn: () => any): any { return this.outer.run(fn); }\n/**\n * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n * @return {?}\n */\nget onUnstable(): EventEmitter<any> { return this._onUnstable; }\n/**\n * Notifies when there is no more microtasks enqueue in the current VM Turn.\n * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n * For this reason this event can fire multiple times per VM Turn.\n * @return {?}\n */\nget onMicrotaskEmpty(): EventEmitter<any> { return this._onMicrotaskEmpty; }\n/**\n * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n * implies we are about to relinquish VM turn.\n * This event gets called just once.\n * @return {?}\n */\nget onStable(): EventEmitter<any> { return this._onStable; }\n/**\n * Notify that an error has been delivered.\n * @return {?}\n */\nget onError(): EventEmitter<any> { return this._onErrorEvents; }\n/**\n * Whether there are no outstanding microtasks or macrotasks.\n * @return {?}\n */\nget isStable(): boolean { return this._isStable; }\n/**\n * @return {?}\n */\nget hasPendingMicrotasks(): boolean { return this._hasPendingMicrotasks; }\n/**\n * @return {?}\n */\nget hasPendingMacrotasks(): boolean { return this._hasPendingMacrotasks; }\n/**\n * @return {?}\n */\nprivate checkStable() {\n    if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n      try {\n        this._nesting++;\n        this._onMicrotaskEmpty.emit(null);\n      } finally {\n        this._nesting--;\n        if (!this._hasPendingMicrotasks) {\n          try {\n            this.runOutsideAngular(() => this._onStable.emit(null));\n          } finally {\n            this._isStable = true;\n          }\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nprivate forkInnerZoneWithAngularBehavior() {\n    this.inner = this.inner.fork({\n      name: 'angular',\n      properties: /** @type {?} */(( <any>{'isAngularZone': true})),\n      onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task,\n                     applyThis: any, applyArgs: any): any => {\n        try {\n          this.onEnter();\n          return delegate.invokeTask(target, task, applyThis, applyArgs);\n        } finally {\n          this.onLeave();\n        }\n      },\n\n\n      onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,\n                 applyThis: any, applyArgs: any[], source: string): any => {\n        try {\n          this.onEnter();\n          return delegate.invoke(target, callback, applyThis, applyArgs, source);\n        } finally {\n          this.onLeave();\n        }\n      },\n\n      onHasTask:\n          (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n              // We are only interested in hasTask events which originate from our zone\n              // (A child hasTask event is not interesting to us)\n              if (hasTaskState.change == 'microTask') {\n                this.setHasMicrotask(hasTaskState.microTask);\n              } else if (hasTaskState.change == 'macroTask') {\n                this.setHasMacrotask(hasTaskState.macroTask);\n              }\n            }\n          },\n\n      onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n        delegate.handleError(target, error);\n        this.triggerError(error);\n        return false;\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate onEnter() {\n    this._nesting++;\n    if (this._isStable) {\n      this._isStable = false;\n      this._onUnstable.emit(null);\n    }\n  }\n/**\n * @return {?}\n */\nprivate onLeave() {\n    this._nesting--;\n    this.checkStable();\n  }\n/**\n * @param {?} hasMicrotasks\n * @return {?}\n */\nprivate setHasMicrotask(hasMicrotasks: boolean) {\n    this._hasPendingMicrotasks = hasMicrotasks;\n    this.checkStable();\n  }\n/**\n * @param {?} hasMacrotasks\n * @return {?}\n */\nprivate setHasMacrotask(hasMacrotasks: boolean) { this._hasPendingMacrotasks = hasMacrotasks; }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate triggerError(error: any) { this._onErrorEvents.emit(error); }\n}\n\nfunction NgZone_tsickle_Closure_declarations() {\n/** @type {?} */\nNgZone.prototype.outer;\n/** @type {?} */\nNgZone.prototype.inner;\n/** @type {?} */\nNgZone.prototype._hasPendingMicrotasks;\n/** @type {?} */\nNgZone.prototype._hasPendingMacrotasks;\n/** @type {?} */\nNgZone.prototype._isStable;\n/** @type {?} */\nNgZone.prototype._nesting;\n/** @type {?} */\nNgZone.prototype._onUnstable;\n/** @type {?} */\nNgZone.prototype._onMicrotaskEmpty;\n/** @type {?} */\nNgZone.prototype._onStable;\n/** @type {?} */\nNgZone.prototype._onErrorEvents;\n}\n\n"]}