{"version":3,"sources":["../../../../modules/@angular/core/src/error_handler.ts"],"names":[],"mappings":"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","file":"error_handler.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_ORIGINAL_ERROR, getDebugContext, getOriginalError} from './errors';\n/**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n * \n * \\@description \n * \n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n * \n * ### Example\n * \n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n * \n * \\@NgModule({ \n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n * \n * \\@stable\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  /**\n   * @internal\n   */\n  rethrowError: boolean;\n/**\n * @param {?=} rethrowError\n */\nconstructor(rethrowError: boolean = true) { this.rethrowError = rethrowError; }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any): void {\n    this._console.error(`EXCEPTION: ${this._extractMessage(error)}`);\n\n    if (error instanceof Error) {\n      const /** @type {?} */ originalError = this._findOriginalError(error);\n      const /** @type {?} */ originalStack = this._findOriginalStack(error);\n      const /** @type {?} */ context = this._findContext(error);\n\n      if (originalError) {\n        this._console.error(`ORIGINAL EXCEPTION: ${this._extractMessage(originalError)}`);\n      }\n\n      if (originalStack) {\n        this._console.error('ORIGINAL STACKTRACE:');\n        this._console.error(originalStack);\n      }\n\n      if (context) {\n        this._console.error('ERROR CONTEXT:');\n        this._console.error(context);\n      }\n    }\n\n    // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n    // when an error happens. If we do not rethrow, bootstrap will always succeed.\n    if (this.rethrowError) throw error;\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_extractMessage(error: any): string {\n    return error instanceof Error ? error.message : error.toString();\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findOriginalError(error: Error): any {\n    let /** @type {?} */ e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findOriginalStack(error: Error): string {\n    let /** @type {?} */ e: any = error;\n    let /** @type {?} */ stack: string = e.stack;\n    while (e instanceof Error && getOriginalError(e)) {\n      e = getOriginalError(e);\n      if (e instanceof Error && e.stack) {\n        stack = e.stack;\n      }\n    }\n\n    return stack;\n  }\n}\n\nfunction ErrorHandler_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nErrorHandler.prototype._console;\n/**\n * \\@internal\n * @type {?}\n */\nErrorHandler.prototype.rethrowError;\n}\n\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message: string, originalError: any): Error {\n  const /** @type {?} */ msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const /** @type {?} */ error = Error(msg);\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n"]}