{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/ng_module_factory_loader.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;;;GAIG;AACH;IAAA;IAOA,CAAC;IAND;;;;OAIG;IACH,oCALY,GAKZ,UALY,IAAA,IAAA,CAAA;IAMZ,4BAAC;AAAD,CAPA,AAOC,IAAA;;AAED,IAAI,gBAAgB,CALhB,eAAA,GAAkB,IAAI,GAAA,EAAiC,CAAG;AAM9D;;;;;;GAMG;AACH,MAPC,gCAAA,EAAA,EAAA,OAAA;IAQC,IAAM,gBAAgB,CAPhB,QAAA,GAAW,eAAA,CAAgB,GAAC,CAAG,EAAC,CAAE,CAAC;IAQzC,EAAE,CAAC,CAAC,QAPC,CAAQ,CAAC,CAAA;QAQZ,MAPM,IAAI,KAAA,CAAM,qCAAC,EAAmC,WAQ9B,QAPC,CAAQ,UAAC,CAAU,IAAC,YAAI,OAAO,CAAO,UAAC,CAAU,IAAK,CAAE,CAAC;IAQlF,CAAC;IACD,eAAe,CAPC,GAAC,CAAG,EAAC,EAAG,OAAA,CAAQ,CAAC;AAQnC,CAAC;AACD;;GAEG;AACH,MATC;IAUC,eAAe,GATG,IAAI,GAAA,EAAiC,CAAG;AAU5D,CAAC;AACD;;;;;;;GAOG;AACH,MAVC,2BAAA,EAAA;IAWC,IAAM,gBAAgB,CAVhB,OAAA,GAAU,eAAA,CAAgB,GAAC,CAAG,EAAC,CAAE,CAAC;IAWxC,EAAE,CAAC,CAAC,CAVC,OAAC,CAAO;QAAC,MAAM,IAAI,KAAA,CAAM,uBAAC,EAAqB,YAAE,CAAS,CAAC;IAWhE,MAAM,CAVC,OAAA,CAAQ;AAWjB,CAAC","file":"ng_module_factory_loader.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nexport abstract class NgModuleFactoryLoader {\n/**\n * @abstract\n * @param {?} path\n * @return {?}\n */\nload(path: string) {}\n}\n\nlet /** @type {?} */ moduleFactories = new Map<string, NgModuleFactory<any>>();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const /** @type {?} */ existing = moduleFactories.get(id);\n  if (existing) {\n    throw new Error(`Duplicate module registered for ${id\n                    } - ${existing.moduleType.name} vs ${factory.moduleType.name}`);\n  }\n  moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n  moduleFactories = new Map<string, NgModuleFactory<any>>();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id: string): NgModuleFactory<any> {\n  const /** @type {?} */ factory = moduleFactories.get(id);\n  if (!factory) throw new Error(`No module with ID ${id} loaded`);\n  return factory;\n}\n"]}