{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/view_container_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAa,cAAA,EAAgB,QAAA,EAAS,MAAA,oBAAA,CAAA;AAO7C;;;;;;;;;;;;;;;;;;GAkBG;AACH;IAAA;IAyHA,CAAC;IAxHD;;;;;OAKG;IACH,kCAAgB,GAAhB,cAAgB,CAAA;IAChB;;;OAGG;IACH,mCAHgB,GAGhB,cAHgB,CAAA;IAIhB;;;OAGG;IACH,yCANgB,GAMhB,cANgB,CAAA;IAOhB;;;;OAIG;IACH,gCAPY,GAOZ,cAPY,CAAA;IAQZ;;;;;OAKG;IACH,8BATY,GASZ,UATY,KAAA,IAAA,CAAA;IAUZ;;;;OAIG;IACH,iCAVgB,GAUhB,cAVgB,CAAA;IAWhB;;;;;;;;;;;;OAYG;IACH,6CAdY,GAcZ,UAdY,WAAA,EAAA,OAAA,EAAA,KAAA,IAAA,CAAA;IAeZ;;;;;;;;;;;;;;;;;;OAkBG;IACH,0CAlBY,GAkBZ,UACM,gBAAqC,EAAE,KAAc,EAAE,QAAmB,EAC1E,gBAA0B,IAAG,CAAC;IACpC;;;;;;;;;;OAUG;IACH,iCArBY,GAqBZ,UArBY,OAAA,EAAA,KAAA,IAAA,CAAA;IAsBZ;;;;;;;;OAQG;IACH,+BAxBY,GAwBZ,UAxBY,OAAA,EAAA,YAAA,IAAA,CAAA;IAyBZ;;;;;;OAMG;IACH,kCA1BY,GA0BZ,UA1BY,OAAA,IAAA,CAAA;IA2BZ;;;;;;;OAOG;IACH,iCA5BY,GA4BZ,UA5BY,KAAA,IAAA,CAAA;IA6BZ;;;;;;;OAOG;IACH,iCA9BY,GA8BZ,UA9BY,KAAA,IAAA,CAAA;IA+BZ,uBAAC;AAAD,CAzHA,AAyHC,IAAA;;AACD;IACA;;OAEG;IACH,2BAhCsB,QAAU;QAAV,aAAA,GAAA,QAAA,CAAU;QAsE9B,gBAAgB;QAChB,qCAAgC,GAC5B,cAAc,CA/CC,oCAAC,CAAoC,CAAC;QAiEzD,gBAAgB;QAChB,iBAAY,GArDG,cAAA,CAAe,2BAAC,CAA2B,CAAC;QAuF3D,gBAAgB;QAChB,iBAAY,GA/DG,cAAA,CAAe,2BAAC,CAA2B,CAAC;QA6E3D,gBAAgB;QAChB,iBAAY,GAjEG,cAAA,CAAe,2BAAC,CAA2B,CAAC;IA5Ef,CAAA;IAiC9C;;;OAGG;IACH,+BAnCG,GAmCH,UAnCG,KAAA,IAA6B,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,WAAC,CAAW,KAAC,CAAK,CAAC,GAAC,CAAG,CAAC,CAAA;IAuC7E,sBAtCG,qCAAA;QAmCH;;WAEG;aACH;YACI,IAAM,gBAAgB,CAtChB,KAAA,GAAQ,IAAA,CAAK,QAAC,CAAQ,WAAC,CAAW;YAuCxC,MAAM,CAtCC,KAAA,GAAQ,KAAA,CAAM,MAAC,GAAQ,CAAA,CAAE;QAuClC,CAAC;;;OAAA;IAIH,sBAxCG,sCAAA;QAqCH;;WAEG;aACH,cAxC8B,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,UAAC,CAAU,CAAC,CAAA;;;OAAA;IA4C/D,sBA1CG,uCAAA;QAuCH;;WAEG;aACH,cA1C6B,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,QAAC,CAAQ,CAAC,CAAA;;;OAAA;IA8C5D,sBA5CG,6CAAA;QAyCH;;WAEG;aACH,cA5CmC,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,cAAC,CAAc,CAAC,CAAA;;;OAAA;IA6CxE;;;;;OAKG;IACH,8CA/CG,GA+CH,UA/CG,WAAA,EAAA,OAAA,EAAA,KAAA;QAAA,wBAAA,EAAA,cAAA;QAAA,sBAAA,EAAA,SAAA,CAAA;QAiDC,IAAM,gBAAgB,CA/ChB,OAAA,GAAgC,WAAA,CAAY,kBAAC,CAAkB,OAAC,CAAO,CAAC;QAgD9E,IAAI,CA/CC,MAAC,CAAM,OAAC,EAAQ,KAAA,CAAM,CAAC;QAgD5B,MAAM,CA/CC,OAAA,CAAQ;IAgDjB,CAAC;IAKH;;;;;;OAMG;IACH,2CArDG,GAqDH,UACM,gBAAqC,EAAE,KAAkB,EAAE,QAAyB,EACpF,gBAAgC;QADO,sBAAA,EAAA,SAAiB,CAAC;QAAE,yBAAA,EAAA,eAAyB;QACpF,iCAAA,EAAA,uBAAgC;QAClC,IAAM,gBAAgB,CArDhB,CAAA,GAAI,IAAA,CAAK,gCAAC,EAAgC,CAAE;QAsDlD,IAAM,gBAAgB,CArDhB,eAAA,GAAkB,QAAA,IAAY,IAAA,CAAK,QAAC,CAAQ,cAAC,CAAc;QAsDjE,IAAM,gBAAgB,CArDhB,YAAA,GAAe,gBAAA,CAAiB,MAAC,CAAM,eAAC,EAAgB,gBAAA,CAAiB,CAAC;QAsDhF,IAAI,CArDC,MAAC,CAAM,YAAC,CAAY,QAAC,EAAS,KAAA,CAAM,CAAC;QAsD1C,MAAM,CArDC,QAAA,CAAS,CAAC,EAAE,YAAA,CAAa,CAAC;IAsDnC,CAAC;IAIH;;;;OAIG;IACH,kCAxDG,GAwDH,UAxDG,OAAA,EAAA,KAAA;QAAA,sBAAA,EAAA,SAAA,CAAA;QAyDC,IAAM,gBAAgB,CAxDhB,CAAA,GAAI,IAAA,CAAK,YAAC,EAAY,CAAE;QAyD9B,EAAE,CAAC,CAAC,KAxDC,IAAQ,CAAA,CAAE,CAAC;YAAC,KAAA,GAAQ,IAAA,CAAK,MAAC,CAAM;QAyDrC,IAAM,gBAAgB,CAxDhB,QAAA,GAAS,CAAiB,OAAC,CAAA,CAAO;QAyDxC,IAAI,CAxDC,QAAC,CAAQ,UAAC,CAAU,QAAC,CAAQ,YAAC,EAAa,KAAA,CAAM,CAAC;QAyDvD,MAAM,CAxDC,QAAA,CAAS,CAAC,EAAE,QAAA,CAAS,CAAC;IAyD/B,CAAC;IACH;;;;OAIG;IACH,gCA5DG,GA4DH,UA5DG,OAAA,EAAA,YAAA;QA6DC,IAAM,gBAAgB,CA5DhB,CAAA,GAAI,IAAA,CAAK,YAAC,EAAY,CAAE;QA6D9B,EAAE,CAAC,CAAC,YA5DC,IAAe,CAAA,CAAE,CAAC;YAAC,MAAA,CAAA;QA6DxB,IAAM,gBAAgB,CA5DhB,QAAA,GAAS,CAAiB,OAAC,CAAA,CAAO;QA6DxC,IAAI,CA5DC,QAAC,CAAQ,QAAC,CAAQ,QAAC,CAAQ,YAAC,EAAa,YAAA,CAAa,CAAC;QA6D5D,MAAM,CA5DC,QAAA,CAAS,CAAC,EAAE,QAAA,CAAS,CAAC;IA6D/B,CAAC;IACH;;;OAGG;IACH,mCA/DG,GA+DH,UA/DG,OAAA;QAgEC,MAAM,CA/DC,IAAA,CAAK,MAAC,GAAQ,IAAA,CAAK,QAAC,CAAQ,WAAC,CAAW,OAAC,CAAO,CAAC,CAAe,OAAC,CAAA,CAAO,CAAC,YAAC,CAAY;YAgExE,CAAC,CA/DC,CAAC;IAgE1B,CAAC;IAIH;;;OAGG;IACH,kCAjEG,GAiEH,UAjEG,KAAA;QAAA,sBAAA,EAAA,SAAA,CAAA;QAkEC,IAAM,gBAAgB,CAjEhB,CAAA,GAAI,IAAA,CAAK,YAAC,EAAY,CAAE;QAkE9B,EAAE,CAAC,CAAC,KAjEC,IAAQ,CAAA,CAAE,CAAC;YAAC,KAAA,GAAQ,IAAA,CAAK,MAAC,GAAQ,CAAA,CAAE;QAkEzC,IAAM,gBAAgB,CAjEhB,IAAA,GAAO,IAAA,CAAK,QAAC,CAAQ,UAAC,CAAU,KAAC,CAAK,CAAC;QAkE7C,IAAI,CAjEC,OAAC,EAAO,CAAE;QAkEf,oDAAoD;QACpD,QAAQ,CAjEC,CAAC,CAAC,CAAC;IAkEd,CAAC;IAIH;;;OAGG;IACH,kCAnEG,GAmEH,UAnEG,KAAA;QAAA,sBAAA,EAAA,SAAA,CAAA;QAoEC,IAAM,gBAAgB,CAnEhB,CAAA,GAAI,IAAA,CAAK,YAAC,EAAY,CAAE;QAoE9B,EAAE,CAAC,CAAC,KAnEC,IAAQ,CAAA,CAAE,CAAC;YAAC,KAAA,GAAQ,IAAA,CAAK,MAAC,GAAQ,CAAA,CAAE;QAoEzC,IAAM,gBAAgB,CAnEhB,IAAA,GAAO,IAAA,CAAK,QAAC,CAAQ,UAAC,CAAU,KAAC,CAAK,CAAC;QAoE7C,MAAM,CAnEC,QAAA,CAAS,CAAC,EAAE,IAAA,CAAK,GAAC,CAAG,CAAC;IAoE/B,CAAC;IACH;;OAEG;IACH,iCArEG,GAqEH;QACI,GAAG,CAAC,CAAC,IArEC,gBAAA,CAAG,CAAA,GAAI,IAAA,CAAK,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAE,EAAG,CAAA;YAsEzC,IAAI,CArEC,MAAC,CAAM,CAAC,CAAC,CAAC;QAsEjB,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CApIA,AAoIC,IAAA;;AAED;IACA;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,gCAAgC,CAAC;IAC7D;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;IACzC;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;IACzC;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;IACzC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC;AACrC,CAAC","file":"view_container_ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from '../profile/profile';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {ElementRef} from './element_ref';\nimport {TemplateRef} from './template_ref';\nimport {ViewContainer} from './view_container';\nimport {EmbeddedViewRef, ViewRef, ViewRef_} from './view_ref';\n/**\n * Represents a container where one or more Views can be attached.\n * \n * The container can contain two kinds of Views. Host Views, created by instantiating a\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n * \n * The location of the View Container within the containing View is specified by the Anchor\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n * have a single View Container.\n * \n * Root elements of Views attached to this container become siblings of the Anchor Element in\n * the Rendered View.\n * \n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n * \\@stable\n * @abstract\n */\nexport abstract class ViewContainerRef {\n/**\n * Anchor element that specifies the location of this container in the containing View.\n * <!-- TODO: rename to anchorElement -->\n * @abstract\n * @return {?}\n */\nelement() {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\nparentInjector() {}\n/**\n * Destroys all Views in this container.\n * @abstract\n * @return {?}\n */\nclear() {}\n/**\n * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n * @abstract\n * @param {?} index\n * @return {?}\n */\nget(index: number) {}\n/**\n * Returns the number of Views currently attached to this container.\n * @abstract\n * @return {?}\n */\nlength() {}\n/**\n * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n * into this container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the {\\@link ViewRef} for the newly created View.\n * @abstract\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number) {}\n/**\n * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n * specified `index`.\n * \n * The component is instantiated using its {\\@link ComponentFactory} which can be\n * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n * \n * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n * @abstract\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][]) {}\n/**\n * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index?: number) {}\n/**\n * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef, currentIndex: number) {}\n/**\n * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n * `-1` if this container doesn't contain the View.\n * @abstract\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef) {}\n/**\n * Destroys a View attached to this container at the specified `index`.\n * \n * If `index` is not specified, the last View in the container will be removed.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number) {}\n/**\n * Use along with {\\@link #insert} to move a View within the current container.\n * \n * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number) {}\n}\nexport class ViewContainerRef_ implements ViewContainerRef {\n/**\n * @param {?} _element\n */\nconstructor(private _element: ViewContainer) {}\n/**\n * @param {?} index\n * @return {?}\n */\nget(index: number): ViewRef { return this._element.nestedViews[index].ref; }\n/**\n * @return {?}\n */\nget length(): number {\n    const /** @type {?} */ views = this._element.nestedViews;\n    return views ? views.length : 0;\n  }\n/**\n * @return {?}\n */\nget element(): ElementRef { return this._element.elementRef; }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._element.injector; }\n/**\n * @return {?}\n */\nget parentInjector(): Injector { return this._element.parentInjector; }\n/**\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context: C = null, index: number = -1):\n      EmbeddedViewRef<C> {\n    const /** @type {?} */ viewRef: EmbeddedViewRef<any> = templateRef.createEmbeddedView(context);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  /** @internal */\n  _createComponentInContainerScope: WtfScopeFn =\n      wtfCreateScope('ViewContainerRef#createComponent()');\n/**\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index: number = -1, injector: Injector = null,\n      projectableNodes: any[][] = null): ComponentRef<C> {\n    const /** @type {?} */ s = this._createComponentInContainerScope();\n    const /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n    const /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n    this.insert(componentRef.hostView, index);\n    return wtfLeave(s, componentRef);\n  }\n\n  /** @internal */\n  _insertScope = wtfCreateScope('ViewContainerRef#insert()');\n/**\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index: number = -1): ViewRef {\n    const /** @type {?} */ s = this._insertScope();\n    if (index == -1) index = this.length;\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_<any>>viewRef));\n    this._element.attachView(viewRef_.internalView, index);\n    return wtfLeave(s, viewRef_);\n  }\n/**\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef, currentIndex: number): ViewRef {\n    const /** @type {?} */ s = this._insertScope();\n    if (currentIndex == -1) return;\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_<any>>viewRef));\n    this._element.moveView(viewRef_.internalView, currentIndex);\n    return wtfLeave(s, viewRef_);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef): number {\n    return this.length ? this._element.nestedViews.indexOf(( /** @type {?} */((<ViewRef_<any>>viewRef))).internalView) :\n                         -1;\n  }\n\n  /** @internal */\n  _removeScope = wtfCreateScope('ViewContainerRef#remove()');\n/**\n * @param {?=} index\n * @return {?}\n */\nremove(index: number = -1): void {\n    const /** @type {?} */ s = this._removeScope();\n    if (index == -1) index = this.length - 1;\n    const /** @type {?} */ view = this._element.detachView(index);\n    view.destroy();\n    // view is intentionally not returned to the client.\n    wtfLeave(s);\n  }\n\n  /** @internal */\n  _detachScope = wtfCreateScope('ViewContainerRef#detach()');\n/**\n * @param {?=} index\n * @return {?}\n */\ndetach(index: number = -1): ViewRef {\n    const /** @type {?} */ s = this._detachScope();\n    if (index == -1) index = this.length - 1;\n    const /** @type {?} */ view = this._element.detachView(index);\n    return wtfLeave(s, view.ref);\n  }\n/**\n * @return {?}\n */\nclear(): void {\n    for (let /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n      this.remove(i);\n    }\n  }\n}\n\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._createComponentInContainerScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._insertScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._removeScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._detachScope;\n/** @type {?} */\nViewContainerRef_.prototype._element;\n}\n\n"]}