{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/template_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AAGnB;;;;;;;;;;;;;GAaG;AACH;IAAA;IAYA,CAAC;IAXD;;;OAGG;IACH,gCASgB,GAThB,cASgB,CAAA;IARhB;;;;OAIG;IACH,wCAKY,GALZ,UAKY,OAAA,IAAA,CAAA;IAJZ,kBAAC;AAAD,CAZA,AAYC,IAAA;;AACD;;;GAGG;AACH;IAMC,gCAAA;IALD;;;;OAIG;IACH,sBAEc,WAAyB,EAAU,UAAY,EAAgB,cAAgB;QAF7F,YAII,iBAAO,SACR;QAHW,iBAAA,GAAA,WAAA,CAAyB;QAAU,gBAAA,GAAA,UAAA,CAAY;QAAgB,oBAAA,GAAA,cAAA,CAAgB;;IAG3F,CAAC;IACH;;;OAGG;IACH,yCAJG,GAIH,UAJG,OAAA;QAKC,IAAM,gBAAgB,CAJhB,IAAA,GAAO,IAAA,CAAK,WAAC,CAAW,0BAAC,CAA0B,IAAC,CAAI,UAAC,CAAU,CAAC;QAK1E,IAAI,CAJC,MAAC,CAAM,OAAC,IAAO,CAAQ,EAAC,CAAA,CAAE,CAAC;QAKhC,MAAM,CAJC,IAAA,CAAK,GAAC,CAAG;IAKlB,CAAC;IAIH,sBANG,oCAAA;QAGH;;WAEG;aACH,cANiC,MAAA,CAAO,IAAI,UAAA,CAAW,IAAC,CAAI,cAAC,CAAc,CAAC,CAAC,CAAA;;;OAAA;IAO7E,mBAAC;AAAD,CAzBA,AAyBC,CAnBA,WAAA,GAmBA;;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;IACnC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;IAClC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC;AACtC,CAAC","file":"template_ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from './element_ref';\nimport {AppView} from './view';\nimport {EmbeddedViewRef} from './view_ref';\n/**\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\n * \n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n * `TemplateRef` from a Component or a Directive via {\\@link Query}.\n * \n * To instantiate Embedded Views based on a Template, use\n * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n * View Container.\n * \\@stable\n * @abstract\n */\nexport abstract class TemplateRef<C> {\n/**\n * @abstract\n * @return {?}\n */\nelementRef() {}\n/**\n * @abstract\n * @param {?} context\n * @return {?}\n */\ncreateEmbeddedView(context: C) {}\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class TemplateRef_<C> extends TemplateRef<C> {\n/**\n * @param {?} _parentView\n * @param {?} _nodeIndex\n * @param {?} _nativeElement\n */\nconstructor(\nprivate _parentView: AppView<any>,\nprivate _nodeIndex: number,\nprivate _nativeElement: any) {\n    super();\n  }\n/**\n * @param {?} context\n * @return {?}\n */\ncreateEmbeddedView(context: C): EmbeddedViewRef<C> {\n    const /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n    view.create(context || /** @type {?} */(( <any>{})));\n    return view.ref;\n  }\n/**\n * @return {?}\n */\nget elementRef(): ElementRef { return new ElementRef(this._nativeElement); }\n}\n\nfunction TemplateRef__tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateRef_.prototype._parentView;\n/** @type {?} */\nTemplateRef_.prototype._nodeIndex;\n/** @type {?} */\nTemplateRef_.prototype._nativeElement;\n}\n\n"]}