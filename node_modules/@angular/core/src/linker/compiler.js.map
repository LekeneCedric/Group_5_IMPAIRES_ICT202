{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,UAAE,EAAW,cAAA,EAAe,MAAA,OAAA,CAAA;AAQnC;;;;GAIG;AACH;IACA;;;OAGG;IACH,sCAFa,eAAmC,EACnC,kBAA0C;QAD1C,oBAAA,GAAA,eAAA,CAAmC;QACnC,uBAAA,GAAA,kBAAA,CAA0C;IAAE,CAAA;IAIzD,mCAAC;AAAD,CARA,AAQC,IAAA;;AAED;IACA,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,eAAe,CAAC;IACvD,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH;IACE,MAZM,IAAI,KAAA,CAAM,gCAAC,CAAgC,CAAC;AAapD,CAAC;AACD;;;;;;;;;GASG;AACH;IAAA;IAyDA,CAAC;IAxDD;;;;;OAKG;IACH,oCAZG,GAYH,UAZG,UAAA,IAA+D,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAavF;;;;OAIG;IACH,qCAbG,GAaH,UAbG,UAAA,IAAyE,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAcjG;;;;OAIG;IACH,oDAdG,GAcH,UAdG,UAAA;QAeC,MAdM,WAAA,EAAY,CAAE;IAetB,CAAC;IACH;;;;OAIG;IACH,qDAfG,GAeH,UAfG,UAAA;QAiBC,MAfM,WAAA,EAAY,CAAE;IAgBtB,CAAC;IACH;;;;;;;OAOG;IACH,wCAhBG,GAgBH,UAhBG,SAAA,IAAuD,MAAM,WAAA,EAAY,CAAE,CAAC,CAAA;IAiB/E;;;OAGG;IACH,6BAhBG,GAgBH,cAhBqB,CAAA;IAiBrB;;;;OAIG;IACH,gCAjBG,GAiBH,UAjBG,IAAA,IAA8B,CAAA;IAwBjC,eAAC;AAAD,CAzDA,AAyDC;;AAvBM,mBAAA,GAAoC;IAkB3C,EAjBE,IAAA,EAAM,UAAA,EAAW;CAkBlB,CAjBC;AAkBF,kBAAkB;AAhBX,uBAAA,GAAiF,cAAM,OAAA,EAkB7F,EAlB6F,CAkB7F,CAjBC;AAoBF;IACA,gBANa;IAOb,QAAQ,CAAC,UAAU,CAAC;IACpB;;;OAGG;IACH,QAAQ,CAAC,cAAc,CAAC;AACxB,CAAC;AAgBD;;;;GAIG;AACH,MAAM,CAlCC,IAAA,gBAAA,CAAM,gBAAA,GAAmB,IAAI,cAAA,CAAiC,iBAAE,CAAiB,CAAC;AAmCzF;;;;;GAKG;AACH;IAAA;IAOA,CAAC;IAND;;;;OAIG;IACH,wCAjCY,GAiCZ,UAjCY,OAAA,IAAA,CAAA;IAkCZ,sBAAC;AAAD,CAPA,AAOC,IAAA","file":"compiler.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '../di';\nimport {stringify} from '../facade/lang';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n * \n * \\@experimental\n */\nexport class ModuleWithComponentFactories<T> {\n/**\n * @param {?} ngModuleFactory\n * @param {?} componentFactories\n */\nconstructor(\npublic ngModuleFactory: NgModuleFactory<T>,\npublic componentFactories: ComponentFactory<any>[]) {}\n}\n\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n/** @type {?} */\nModuleWithComponentFactories.prototype.ngModuleFactory;\n/** @type {?} */\nModuleWithComponentFactories.prototype.componentFactories;\n}\n\n/**\n * @return {?}\n */\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n * \n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * \\@stable\n */\nexport class Compiler {\n/**\n * Compiles the given NgModule and all of its components. All templates of the components listed\n * in `entryComponents` have to be inlined.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n/**\n * Compiles the given NgModule and all of its components\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n/**\n * Same as {\\@link compileModuleSync} but also creates ComponentFactories for all components.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n/**\n * Same as {\\@link compileModuleAsync} but also creates ComponentFactories for all components.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n/**\n * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n * the template of the given component.\n * This is used by the `upgrade` library to compile the appropriate transclude content\n * in the AngularJS wrapper component.\n * @param {?} component\n * @return {?}\n */\ngetNgContentSelectors(component: Type<any>): string[] { throw _throwError(); }\n/**\n * Clears all caches.\n * @return {?}\n */\nclearCache(): void {}\n/**\n * Clears the cache for the given component/ngModule.\n * @param {?} type\n * @return {?}\n */\nclearCacheFor(type: Type<any>) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Compiler_tsickle_Closure_declarations() {\n/** @type {?} */\nCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompiler.ctorParameters;\n}\n\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: any[],\n  missingTranslation?: MissingTranslationStrategy,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const /** @type {?} */ COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n/**\n * A factory for creating a Compiler\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class CompilerFactory {\n/**\n * @abstract\n * @param {?=} options\n * @return {?}\n */\ncreateCompiler(options?: CompilerOptions[]) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}