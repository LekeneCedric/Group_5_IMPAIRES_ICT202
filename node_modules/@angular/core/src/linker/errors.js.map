{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/errors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,YAAE,EAAY,MAAA,kBAAA,CAAA;AACrB,OAAO,EAAA,mBAAE,EAAoB,UAAA,EAAW,MAAA,WAAA,CAAA;AAExC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MADC,sDAEG,QAAa,EAAE,SAAc,EAAE,YAAqB;IACtD,IAAI,gBAAgB,CADhB,GAAA,GAEA,mEAAiE,QADC,2BAAQ,SAAsB,OAAS,CAAI;IAEjH,EAAE,CAAC,CAAC,YADC,CAAY,CAAC,CAAA;QAEhB,GAAG;YACC,qGAAqG;gBACrG,mDAAmD,CADC;IAE1D,CAAC;IACD,IAAM,gBAAgB,CADhB,KAAA,GAAQ,KAAA,CAAM,GAAC,CAAG,CAAC;IAEzB,CAAkB,CAAE,KADV,CAAA,CAAI,CAAC,UAAC,CAAU,GAAG,2CAAA,CAA4C;IAEzE,MAAM,CADC,KAAA,CAAM;AAEf,CAAC;AACD;;;;;;;;GAQG;AACH,MAHC,2BAAA,aAAA,EAAA,OAAA;IAIC,IAAM,gBAAgB,CAHhB,KAAA,GAAQ,YAAA,CAAa,cAAC,OAAY,CAAO,MAAO,EAAG,aAAA,CAAc,CAAC;IAIxE,CAAkB,CAAE,KAHV,CAAA,CAAI,CAAC,mBAAC,CAAmB,GAAG,OAAA,CAAQ;IAI9C,CAAkB,CAAE,KAHV,CAAA,CAAI,CAAC,UAAC,CAAU,GAAG,gBAAA,CAAiB;IAI9C,MAAM,CAHC,KAAA,CAAM;AAIf,CAAC;AACD;;;;;;;;GAQG;AACH,MAJC,6BAAA,OAAA;IAKC,MAAM,CAJC,KAAA,CAAM,sCAAC,OAA2C,CAAE,CAAC;AAK9D,CAAC","file":"errors.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {wrappedError} from '../error_handler';\nimport {ERROR_DEBUG_CONTEXT, ERROR_TYPE} from '../errors';\nimport {DebugContext} from './debug_context';\n/**\n * An error thrown if application changes model breaking the top-down data flow.\n * \n * This exception is only thrown in dev mode.\n * \n * <!-- TODO: Add a link once the dev mode option is configurable -->\n * \n * ### Example\n * \n * ```typescript\n * \\@Component({ \n *   selector: 'parent',\n *   template: '<child [prop]=\"parentProp\"></child>',\n * })\n * class Parent {\n *   parentProp = 'init';\n * }\n * \n * \\@Directive({selector: 'child', inputs: ['prop']})\n * class Child {\n *   constructor(public parent: Parent) {}\n * \n *   set prop(v) {\n *     // this updates the parent property, which is disallowed during change detection\n *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n *     this.parent.parentProp = 'updated';\n *   }\n * }\n * ```\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(\n    oldValue: any, currValue: any, isFirstCheck: boolean) {\n  let /** @type {?} */ msg =\n      `Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  const /** @type {?} */ error = Error(msg);\n  ( /** @type {?} */((error as any)))[ERROR_TYPE] = expressionChangedAfterItHasBeenCheckedError;\n  return error;\n}\n/**\n * Thrown when an exception was raised during view creation, change detection or destruction.\n * \n * This error wraps the original exception to attach additional contextual information that can\n * be useful for debugging.\n * @param {?} originalError\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedError(originalError: any, context: DebugContext): Error {\n  const /** @type {?} */ error = wrappedError(`Error in ${context.source}`, originalError);\n  ( /** @type {?} */((error as any)))[ERROR_DEBUG_CONTEXT] = context;\n  ( /** @type {?} */((error as any)))[ERROR_TYPE] = viewWrappedError;\n  return error;\n}\n/**\n * Thrown when a destroyed view is used.\n * \n * This error indicates a bug in the framework.\n * \n * This is an internal Angular error.\n * @param {?} details\n * @return {?}\n */\nexport function viewDestroyedError(details: string) {\n  return Error(`Attempt to use a destroyed view: ${details}`);\n}\n"]}